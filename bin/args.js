module.exports = {
    "config": "Path to the config file",
    "config-register": "Preload one or more modules before loading the webpack configuration",
    "config-name": "Name of the config to use",
    "describe": "Environment passed to the config, when it is a function",
    "mode": "Sets the mode of your current build depending on your build.",
    "context": "Determines where webpack will look for files",
    "entry": "The entry point of your application",
    "module-bind": "Bind an extension to a loader",
    "module-bind-post":  "Bind an extension to a post loader"
    "module-bind-pre":  "Bind an extension to a pre loader",
    "output": "The output path and file for compilation assets",
    "o": "Shortcut for output",
    "output-path":  "The path where webpack will output its generated files",
    "output-filename": "Name of the file generated by webpack",
    "output-chunk-filename":  "Give each file a specific [id] or [hash] prefix",
    "output-source-map-filename": "The name of the sourcemap generated by webpack",
    "output-public-path": "The public path webpack will index files from",
    "output-jsonp-function": "A function used to async load chunks in a web env",
    "output-pathinfo": "Include comments in generated files about the modules",
    "output-library": "Expose the exports of the entry point as library",
    "output-library-target": "Descripes the target of the library, like CJS or umd.",
    "records-input-path": "Specifies a input path for records of module information.",
    "records-output-path": "Specifies an output path for records of module information.",
    "records-path": "Specifies a path for records of module information.",
    "define": "Define any free var in the bundle",
    "target": "Sets the target to built against",
    "cache": "Cache modules to improve compilation speed",
    "watch": "Watch for files changed",
    "w": "Shortcut for watch",
    "watch-aggregate-timeout":  "Specify a timeout before webpack rebuilds",
    "watch-poll": "specify an intervall webpack will watch for file changes",
    "hot": "Enables Hot Module Replacement",
    "debug": "Switch loaders to debug mode",
    "devtool": "Determine which source maps to use when bundling",
    "resolve-alias": "Expose aliases to import modules from",
    "resolve-extensions": "Resolve specified extensions",
    "resolve-loader-alias": "Setup a loader alias for resolving",
    "optimize-max-chunks":"Try to keep the chunk count below a limit",
    "prefetch": "Prefetch this request (Example: --prefetch ./file.js)",
    "provide": "Provide these modules as free vars in all modules (Example: --provide jQuery=jquery)",
    "labeled-modules": "Enables labeled modules",
    "plugin": "Load this plugin",
    "bail": "Fail on first error",
    "profile": "Profile a bundle with stats and information to use with analyze tools",
    "d": "shortcut for --debug --devtool eval-cheap-module-source-map --output-pathinfo",
    "p": "shortcut for --optimize-minimize --define process.env.NODE_ENV=\"production\"",
	"silent": "Prevent output from being displayed in stdout",
    "json": "Prints the result as JSON.",
    "j": "Shortcut for json",
	"progress": "Print compilation progress in percentage",
	"color": "Enables/Disables colors on the console",
	"sort-modules-by":  "Sorts the modules list by property in module",
	"sort-chunks-by": "Sorts the chunks list by property in chunk",
	"sort-assets-by": "Sorts the assets list by property in asset",
	"hide-modules": "Hides info about modules",
	"display-exclude": "Exclude modules in the output",
	"display-modules": "Display even excluded modules in the output",
	"display-max-modules": "Sets the maximum number of visible modules in output",
	"display-chunks":  "Display chunks in the output",
	"display-entrypoints": "Display entry points in the output",
	"display-origins": "Display origins of chunks in the output",
	"display-cached": "Display also cached modules in the output",
	"display-cached-assets":  "Display also cached assets in the output",
	"display-reasons":  "Display reasons about module inclusion in the output",
	"display-depth":  "Display distance from entry point for each module",
	"display-used-exports": "Display information about used exports in modules (Tree Shaking)",
	"display-provided-exports": "Display information about exports provided from modules",
	"display-optimization-bailout":"Display information about why optimization bailed out for modules",
	"display-error-details": "Display details about errors",
	"display": "Select display preset",
	"verbose": "Show more details",
	"info-verbosity":"Controls the output of lifecycle messaging e.g. Started watching files...",
	"build-delimiter": "Display custom text after build output",
    "init": "Initialize a new webpack configuration",
    "migrate":  "Migrate a configuration to a new version",
    "add": "Add a property to your configuration",
    "remove": "Remove a property from your configuration",
    "update": "Update a property in your webpack configuration",
    "make": "Makefile build for your webpack configuration",
    "serve": "Use webpack-serve to bundle",
    "generate-loader": "Scaffold a loader repository",
    "generate-plugin": "Scaffold a plugin repository",
    "info": "Outputs information about your system and dependencies"
}

/*
const chalk = require('chalk');

process.on('uncaughtException', (error) => {
    logger.error(`Uncaught exception: ${error}`);
    if (error && error.stack)
      logger.error(error.stack);
    process.exit(1);
  });
  
  process.on('unhandledRejection', (error) => {
    logger.error(`Promise rejection: ${error}`);
    if (error && error.stack)
      logger.error(error.stack);
    process.exit(1);
  });


const b = chalk.blue;
const m = chalk.magenta;
const CLI_TITLE = chalk.bold.underline('Polymer-CLI');
const CLI_DESCRIPTION = 'The multi-tool for Polymer projects';
const CLI_USAGE = 'Usage: \`polymer <command> [options ...]\`';

  const HELP_HEADER = `
  ${b('/\\˜˜/')}   ${m('/\\˜˜/')}${b('\\')}
 ${b('/__\\/')}   ${m('/__\\/')}${b('_\_\\')}    ${CLI_TITLE}
${b('/\\  /')}   ${m('/\\  /')}${b('\\  /\\')}
${b('/__\\/')}   ${m('/__\\/')}  ${b('\\/__\\')}  ${CLI_DESCRIPTION}
${b('\\  /\\')}  ${m('/\\  /')}   ${b('/\\  /')}
${b('\\/__\\')}${m('/__\\/')}   ${b('/__\\/')}   ${CLI_USAGE}
 ${b('\\')}  ${m('/\\  /')}   ${b('/\\  /')}
  ${b('\\')}${m('/__\\/')}   ${b('/__\\/')}
`
*/